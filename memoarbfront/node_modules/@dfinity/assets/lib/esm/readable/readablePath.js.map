{"version":3,"file":"readablePath.js","sourceRoot":"","sources":["../../../src/readable/readablePath.ts"],"names":[],"mappings":"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","sourcesContent":["import { Readable } from './readable';\nimport mime from 'mime/lite';\nimport fs from 'fs';\nimport path from 'path';\n\nexport class ReadablePath implements Readable {\n  private readonly _path: string;\n  private readonly _size: number;\n  private _fd?: number;\n\n  protected constructor(path: string, size: number) {\n    this._path = path;\n    this._size = size;\n  }\n\n  public get fileName(): string {\n    return path.basename(this._path);\n  }\n\n  public get contentType(): string {\n    return mime.getType(this.fileName) ?? 'application/octet-stream';\n  }\n\n  public get length(): number {\n    return this._size;\n  }\n\n  static async create(path: string): Promise<ReadablePath> {\n    return new Promise<ReadablePath>((resolve, reject) => {\n      fs.stat(path, (err, stats) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(new ReadablePath(path, stats.size));\n      });\n    });\n  }\n\n  public async open(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this._fd !== undefined) {\n        reject('File is already open');\n        return;\n      }\n      fs.open(this._path, (err, fd) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        this._fd = fd;\n        resolve();\n      });\n    });\n  }\n\n  public async close(): Promise<void> {\n    return new Promise<void>((resolve, reject) => {\n      if (this._fd === undefined) {\n        reject('No open file handle found');\n        return;\n      }\n      fs.close(this._fd, err => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve();\n      });\n    });\n  }\n\n  public async slice(start: number, end: number): Promise<Uint8Array> {\n    return new Promise<Uint8Array>((resolve, reject) => {\n      if (this._fd === undefined) {\n        reject('No open file handle found');\n        return;\n      }\n      const buffer = Buffer.alloc(end - start);\n      fs.read(this._fd, buffer, 0, end - start, start, (err: unknown) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(new Uint8Array(buffer));\n      });\n    });\n  }\n}\n"]}