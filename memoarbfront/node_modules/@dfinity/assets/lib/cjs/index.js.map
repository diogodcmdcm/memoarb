{"version":3,"file":"index.js","sourceRoot":"","sources":["../../src/index.ts"],"names":[],"mappings":"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","sourcesContent":["import {\n  Actor,\n  ActorConfig,\n  ActorSubclass,\n  Cbor as cbor,\n  Certificate,\n  compare,\n  getDefaultAgent,\n  HashTree,\n  lookup_path,\n  lookupResultToBuffer,\n  LookupStatus,\n  reconstruct,\n  uint8ToBuf,\n} from '@dfinity/agent';\nimport { lebDecode } from '@dfinity/candid';\nimport { PipeArrayBuffer } from '@dfinity/candid/lib/cjs/utils/buffer';\nimport { AssetsCanisterRecord, getAssetsCanister } from './canisters/assets';\nimport { sha256 } from '@noble/hashes/sha256';\nimport { BatchOperationKind } from './canisters/assets_service';\nimport * as base64Arraybuffer from 'base64-arraybuffer';\nimport { isReadable, Readable } from './readable/readable';\nimport { ReadableFile } from './readable/readableFile';\nimport { ReadableBlob } from './readable/readableBlob';\nimport { ReadablePath } from './readable/readablePath';\nimport { ReadableBytes } from './readable/readableBytes';\nimport { limit, LimitFn } from './utils/limit';\nimport fs from 'fs';\n\n/**\n * Supported content encodings by asset canister\n */\nexport type ContentEncoding = 'identity' | 'gzip' | 'compress' | 'deflate' | 'br';\n\n/**\n * Upload progress in bytes\n */\nexport interface Progress {\n  current: number;\n  total: number;\n}\n\n/**\n * Configuration that can be passed to set and override defaults and add progress callback\n */\nexport interface StoreConfig {\n  /**\n   * File name\n   * @default File object name or name in file path\n   */\n  fileName?: string;\n  /**\n   * File path that file will be uploaded to\n   * @default '/'\n   */\n  path?: string;\n  /**\n   * File content type\n   * @default File/Blob object type or type from file name extension\n   */\n  contentType?: string;\n  /**\n   * Custom headers to be sent with the asset\n   * @default []\n   */\n  headers?: Array<[string, string]>;\n  /**\n   * Content encoding\n   * @default 'identity'\n   */\n  contentEncoding?: ContentEncoding;\n  /**\n   * File hash generation will be skipped if hash is provided\n   */\n  sha256?: Uint8Array;\n  /**\n   * Callback method to get upload progress in bytes (current / total)\n   */\n  onProgress?: (progress: Progress) => void;\n}\n\nexport type StoreReadableArgs = [readable: Readable, config?: StoreConfig];\n\nexport type StoreFileArgs = [file: File, config?: StoreConfig];\n\nexport type StoreBlobArgs = [\n  blob: Blob,\n  config: Omit<StoreConfig, 'fileName'> & Required<Pick<StoreConfig, 'fileName'>>,\n];\n\nexport type StorePathArgs = [path: string, config?: StoreConfig];\n\nexport type StoreBytesArgs = [\n  bytes: Uint8Array | ArrayBuffer | number[],\n  config: Omit<StoreConfig, 'fileName'> & Required<Pick<StoreConfig, 'fileName'>>,\n];\n\n/**\n * Arguments to store an asset in asset manager\n */\nexport type StoreArgs =\n  | StoreReadableArgs\n  | StoreFileArgs\n  | StoreBlobArgs\n  | StorePathArgs\n  | StoreBytesArgs;\n\n/**\n * Arguments to commit batch in asset manager\n */\nexport interface CommitBatchArgs {\n  onProgress?: (progress: Progress) => void;\n}\n\n/**\n * Configuration that can be passed to set the canister id of the\n * assets canister to be managed, inherits actor configuration and\n * has additional asset manager specific configuration options.\n */\nexport interface AssetManagerConfig extends ActorConfig {\n  /**\n   * Max number of concurrent requests to the Internet Computer\n   * @default 16\n   */\n  concurrency?: number;\n  /**\n   * Max file size in bytes that the asset manager shouldn't chunk\n   * @default 1900000\n   */\n  maxSingleFileSize?: number;\n  /**\n   * Size of each chunk in bytes when the asset manager has to chunk a file\n   * @default 1900000\n   */\n  maxChunkSize?: number;\n}\n\nexport class AssetManager {\n  private readonly _actor: ActorSubclass<AssetsCanisterRecord>;\n  private readonly _limit: LimitFn;\n  private readonly _maxSingleFileSize: number;\n  private readonly _maxChunkSize: number;\n\n  /**\n   * Create assets canister manager instance\n   * @param config Additional configuration options, canister id is required\n   */\n  constructor(config: AssetManagerConfig) {\n    const { concurrency, maxSingleFileSize, maxChunkSize, ...actorConfig } = config;\n    this._actor = getAssetsCanister(actorConfig);\n    this._limit = limit(concurrency ?? 16);\n    this._maxSingleFileSize = maxSingleFileSize ?? 1900000;\n    this._maxChunkSize = maxChunkSize ?? 1900000;\n  }\n\n  /**\n   * Create readable from store arguments\n   * @param args Arguments with either a file, blob, path, bytes or custom Readable implementation\n   */\n  static async toReadable(...args: StoreArgs): Promise<Readable> {\n    if (typeof File === 'function' && args[0] instanceof File) {\n      return new ReadableFile(args[0]);\n    }\n    if (typeof Blob === 'function' && args[0] instanceof Blob && args[1]?.fileName) {\n      return new ReadableBlob(args[1].fileName, args[0]);\n    }\n    if (typeof args[0] === 'string') {\n      return await ReadablePath.create(args[0]);\n    }\n    if (\n      (Array.isArray(args[0]) || args[0] instanceof Uint8Array || args[0] instanceof ArrayBuffer) &&\n      args[1]?.fileName\n    ) {\n      return new ReadableBytes(args[1].fileName, args[0]);\n    }\n    if (isReadable(args[0])) {\n      return args[0];\n    }\n\n    throw new Error('Invalid arguments, readable could not be created');\n  }\n\n  /**\n   * Get list of all files in assets canister\n   * @returns All files in asset canister\n   */\n  public async list(): ReturnType<AssetsCanisterRecord['list']> {\n    return this._actor.list({});\n  }\n\n  /**\n   * Store data on assets canister\n   * @param args Arguments with either a file, blob, path, bytes or custom Readable implementation\n   */\n  public async store(...args: StoreArgs): Promise<string> {\n    const readable = await AssetManager.toReadable(...args);\n    const [, config] = args;\n    const key = [config?.path ?? '', config?.fileName ?? readable.fileName].join('/');\n\n    // If asset is small enough upload in one request else upload in chunks (batch)\n    if (readable.length <= this._maxSingleFileSize) {\n      config?.onProgress?.({ current: 0, total: readable.length });\n      await this._limit(async () => {\n        await readable.open();\n        const bytes = await readable.slice(0, readable.length);\n        await readable.close();\n        const hash = config?.sha256 ?? sha256.create().update(new Uint8Array(bytes)).digest();\n        return this._actor.store({\n          key,\n          content: bytes,\n          content_type: readable.contentType,\n          sha256: [hash],\n          content_encoding: config?.contentEncoding ?? 'identity',\n        });\n      });\n      config?.onProgress?.({ current: readable.length, total: readable.length });\n    } else {\n      // Create batch to upload asset in chunks\n      const batch = this.batch();\n      await batch.store(readable, config);\n      await batch.commit();\n    }\n\n    return key;\n  }\n\n  /**\n   * Delete file from assets canister\n   * @param key The path to the file on the assets canister e.g. /folder/to/my_file.txt\n   */\n  public async delete(key: string): Promise<void> {\n    await this._actor.delete_asset({ key });\n  }\n\n  /**\n   * Delete all files from assets canister\n   */\n  public async clear(): Promise<void> {\n    await this._actor.clear({});\n  }\n\n  /**\n   * Get asset instance from assets canister\n   * @param key The path to the file on the assets canister e.g. /folder/to/my_file.txt\n   * @param acceptEncodings The accepted content encodings, defaults to ['identity']\n   */\n  public async get(key: string, acceptEncodings?: ContentEncoding[]): Promise<Asset> {\n    const data = await this._actor.get({\n      key,\n      accept_encodings: acceptEncodings ?? ['identity'],\n    });\n\n    return new Asset(\n      this._actor,\n      this._limit,\n      this._maxSingleFileSize,\n      this._maxChunkSize,\n      key,\n      acceptEncodings ?? ['identity'],\n      data.content,\n      data.content_type,\n      Number(data.total_length),\n      data.content_encoding,\n      data.content.length,\n      data.sha256[0],\n    );\n  }\n\n  /**\n   * Create a batch assets operations instance, commit multiple operations in a single request\n   */\n  public batch(): AssetManagerBatch {\n    return new AssetManagerBatch(this._actor, this._limit, this._maxChunkSize);\n  }\n}\n\n// Required since the sha256 type is not exported\n// eslint-disable-next-line @typescript-eslint/no-unused-vars\nconst hasher = sha256.create();\ntype SHA256TYPE = typeof hasher;\n\nclass AssetManagerBatch {\n  private _scheduledOperations: Array<\n    (batch_id: bigint, onProgress?: (progress: Progress) => void) => Promise<BatchOperationKind[]>\n  > = [];\n  private _sha256: { [key: string]: SHA256TYPE } = {};\n  private _progress: { [key: string]: Progress } = {};\n\n  constructor(\n    private readonly _actor: ActorSubclass<AssetsCanisterRecord>,\n    private readonly _limit: LimitFn,\n    private readonly _maxChunkSize: number,\n  ) {}\n\n  /**\n   * Insert batch operation to store data on assets canister\n   * @param args Arguments with either a file, blob, path, bytes or custom Readable implementation\n   */\n  public async store(...args: StoreArgs): Promise<string> {\n    const readable = await AssetManager.toReadable(...args);\n    const [, config] = args;\n    const key = [config?.path ?? '', config?.fileName ?? readable.fileName].join('/');\n    if (!config?.sha256) {\n      this._sha256[key] = sha256.create();\n    }\n    this._progress[key] = { current: 0, total: readable.length };\n    config?.onProgress?.(this._progress[key]);\n    this._scheduledOperations.push(async (batch_id, onProgress) => {\n      await readable.open();\n      const chunkCount = Math.ceil(readable.length / this._maxChunkSize);\n      const chunkIds: bigint[] = await Promise.all(\n        Array.from({ length: chunkCount }).map(async (_, index) => {\n          const content = await readable.slice(\n            index * this._maxChunkSize,\n            Math.min((index + 1) * this._maxChunkSize, readable.length),\n          );\n          if (!config?.sha256) {\n            this._sha256[key].update(content);\n          }\n          const { chunk_id } = await this._limit(() =>\n            this._actor.create_chunk({\n              content,\n              batch_id,\n            }),\n          );\n          this._progress[key].current += content.length;\n          config?.onProgress?.(this._progress[key]);\n          onProgress?.({\n            current: Object.values(this._progress).reduce((acc, val) => acc + val.current, 0),\n            total: Object.values(this._progress).reduce((acc, val) => acc + val.total, 0),\n          });\n\n          return chunk_id;\n        }),\n      );\n      await readable.close();\n      const headers: [] | [[string,string][]] = config?.headers ? [config.headers] : [];\n      return [\n        {\n          CreateAsset: { key, content_type: config?.contentType ?? readable.contentType, headers },\n        },\n        {\n          SetAssetContent: {\n            key,\n            sha256: [config?.sha256 ?? new Uint8Array(this._sha256[key].digest())],\n            chunk_ids: chunkIds,\n            content_encoding: config?.contentEncoding ?? 'identity',\n          },\n        },\n      ];\n    });\n    return key;\n  }\n\n  /**\n   * Insert batch operation to delete file from assets canister\n   * @param key The path to the file on the assets canister e.g. /folder/to/my_file.txt\n   */\n  public delete(key: string): void {\n    this._scheduledOperations.push(async () => [{ DeleteAsset: { key } }]);\n  }\n\n  /**\n   * Commit all batch operations to assets canister\n   * @param args Optional arguments with optional progress callback for commit progress\n   */\n  public async commit(args?: CommitBatchArgs): Promise<void> {\n    // Create batch\n    const { batch_id } = await this._limit(() => this._actor.create_batch({}));\n\n    // Progress callback\n    args?.onProgress?.({\n      current: Object.values(this._progress).reduce((acc, val) => acc + val.current, 0),\n      total: Object.values(this._progress).reduce((acc, val) => acc + val.total, 0),\n    });\n\n    // Execute scheduled operations\n    const operations = (\n      await Promise.all(\n        this._scheduledOperations.map(scheduled_operation =>\n          scheduled_operation(batch_id, args?.onProgress),\n        ),\n      )\n    ).flat();\n\n    // Commit batch\n    await this._limit(() => this._actor.commit_batch({ batch_id, operations }));\n\n    // Cleanup\n    this._scheduledOperations = [];\n    this._sha256 = {};\n    this._progress = {};\n  }\n}\n\nclass Asset {\n  constructor(\n    private readonly _actor: ActorSubclass<AssetsCanisterRecord>,\n    private readonly _limit: LimitFn,\n    private readonly _maxSingleFileSize: number,\n    private readonly _maxChunkSize: number,\n    private readonly _key: string,\n    private readonly _acceptEncodings: ContentEncoding[],\n    private readonly _content: Uint8Array,\n    public readonly contentType: string,\n    public readonly length: number,\n    public readonly contentEncoding: string,\n    public readonly chunkSize: number,\n    public readonly sha256?: Uint8Array,\n  ) {}\n\n  /**\n   * Get asset content as blob (web), most browsers are able to use disk storage for larger blobs\n   */\n  public async toBlob(): Promise<Blob> {\n    const blobs = Array.from<Blob>({ length: Math.ceil(this.length / this.chunkSize) });\n    await this.getChunks((index, chunk) => (blobs[index] = new Blob([chunk])));\n    return new Blob([...blobs]);\n  }\n\n  /**\n   * Get asset content as unsigned 8-bit integer array, use `toBlob` (web) or `write` (Node.js) for larger files\n   */\n  public async toUint8Array(): Promise<Uint8Array> {\n    const bytes = new Uint8Array(this.length);\n    await this.getChunks((index, chunk) => bytes.set(chunk, index * this.chunkSize));\n    return bytes;\n  }\n\n  /**\n   * Get asset content as number array, use `toBlob` (web) or `write` (Node.js) for larger files\n   */\n  public async toNumberArray(): Promise<number[]> {\n    const chunks = Array.from<number[]>({ length: Math.ceil(this.length / this.chunkSize) });\n    await this.getChunks((index, chunk) => (chunks[index] = Array.from(chunk)));\n    return chunks.flat();\n  }\n\n  /**\n   * Write asset content to file (Node.js)\n   * @param path File path to write to\n   */\n  public async write(path: string): Promise<void> {\n    const fd = await new Promise<number>((resolve, reject) =>\n      fs.open(path, 'w', (err: unknown, fd: number) => {\n        if (err) {\n          reject(err);\n          return;\n        }\n        resolve(fd);\n      }),\n    );\n    await this.getChunks(\n      (index, chunk) =>\n        new Promise<void>((resolve, reject) =>\n          fs.write(fd, chunk, 0, chunk.length, index * this.chunkSize, (err: unknown) => {\n            if (err) {\n              reject(err);\n              return;\n            }\n            resolve();\n          }),\n        ),\n    );\n    await new Promise<void>(resolve => fs.close(fd, () => resolve()));\n  }\n\n  /**\n   * Get All chunks of asset through `onChunk` callback, can be used for a custom storage implementation\n   * @param onChunk Called on each received chunk\n   * @param sequential Chunks are received in sequential order when true or `concurrency` is `1` in config\n   */\n  public async getChunks(\n    onChunk: (index: number, chunk: Uint8Array) => void,\n    sequential?: boolean,\n  ) {\n    onChunk(0, this._content);\n    const chunkLimit = sequential ? limit(1) : this._limit;\n    await Promise.all(\n      Array.from({ length: Math.ceil(this.length / this.chunkSize) - 1 }).map((_, index) =>\n        chunkLimit(async () => {\n          const { content } = await this._actor.get_chunk({\n            key: this._key,\n            content_encoding: this.contentEncoding,\n            index: BigInt(index + 1),\n            sha256: this.sha256 ? [this.sha256] : [],\n          });\n          onChunk(index + 1, content);\n        }),\n      ),\n    );\n  }\n\n  /**\n   * Check if asset has been certified, which means that the content's hash is in the canister hash tree\n   */\n  public async isCertified(): Promise<boolean> {\n    // Below implementation is based on Internet Computer service worker\n    const agent = Actor.agentOf(this._actor) ?? getDefaultAgent();\n    const canisterId = Actor.canisterIdOf(this._actor);\n\n    if (!agent.rootKey) {\n      throw Error('Agent is missing root key');\n    }\n\n    const response = await this._limit(() =>\n      this._actor.http_request({\n        method: 'get',\n        url: this._key,\n        headers: [['Accept-Encoding', this._acceptEncodings.join(', ')]],\n        body: new Uint8Array(),\n      }),\n    );\n\n    let certificate: ArrayBuffer | undefined;\n    let tree: ArrayBuffer | undefined;\n    const certificateHeader = response.headers.find(\n      ([key]) => key.trim().toLowerCase() === 'ic-certificate',\n    );\n    if (!certificateHeader) {\n      return false;\n    }\n    const fields = certificateHeader[1].split(/,/);\n    for (const f of fields) {\n      const [, name, b64Value] = [...(f.match(/^(.*)=:(.*):$/) ?? [])].map(x => x.trim());\n      const value = base64Arraybuffer.decode(b64Value);\n      if (name === 'certificate') {\n        certificate = value;\n      } else if (name === 'tree') {\n        tree = value;\n      }\n    }\n\n    if (!certificate || !tree) {\n      // No certificate or tree in response header\n      return false;\n    }\n\n    const cert = await Certificate.create({\n      certificate: new Uint8Array(certificate),\n      rootKey: agent.rootKey,\n      canisterId,\n    }).catch(() => Promise.resolve());\n\n    if (!cert) {\n      // Certificate is not valid\n      return false;\n    }\n\n    // Check certificate time\n    const timeLookup = cert.lookup(['time']);\n    if (timeLookup.status !== LookupStatus.Found || !(timeLookup.value instanceof ArrayBuffer)) {\n      return false;\n    }\n\n    const decodedTime = lebDecode(new PipeArrayBuffer(timeLookup.value));\n    const certTime = Number(decodedTime / BigInt(1_000_000)); // Convert from nanos to millis\n    const now = Date.now();\n    const maxCertTimeOffset = 300_000; // 5 min\n    if (certTime - maxCertTimeOffset > now || certTime + maxCertTimeOffset < now) {\n      return false;\n    }\n\n    const hashTree: HashTree = cbor.decode(new Uint8Array(tree));\n    const reconstructed = await reconstruct(hashTree);\n    const witness = cert.lookup(['canister', canisterId.toUint8Array(), 'certified_data']);\n\n    if (witness.status !== LookupStatus.Found || !(witness.value instanceof ArrayBuffer)) {\n      // Could not find certified data for this canister in the certificate\n      return false;\n    }\n\n    // First validate that the Tree is as good as the certification\n    if (compare(witness.value, reconstructed) !== 0) {\n      // Witness != Tree passed in ic-certification\n      return false;\n    }\n\n    // Lookup hash of asset in tree\n    const treeSha = lookupResultToBuffer(lookup_path(['http_assets', this._key], hashTree));\n\n    return !!treeSha && !!this.sha256 && compare(this.sha256.buffer, treeSha) === 0;\n  }\n\n  /**\n   * Check if the hash of the asset data is equal to the hash that has been certified\n   * @param bytes Optionally pass data to hash instead of waiting for asset data to be fetched and hashed\n   */\n  public async verifySha256(bytes?: Uint8Array | number[]): Promise<boolean> {\n    if (!this.sha256?.buffer) {\n      return false;\n    }\n    const hash = sha256.create();\n    if (bytes) {\n      hash.update(Array.isArray(bytes) ? new Uint8Array(bytes) : bytes);\n    } else {\n      await this.getChunks((_, chunk) => hash.update(chunk), true);\n    }\n    return compare(uint8ToBuf(this.sha256), uint8ToBuf(hash.digest())) === 0;\n  }\n}\n"]}