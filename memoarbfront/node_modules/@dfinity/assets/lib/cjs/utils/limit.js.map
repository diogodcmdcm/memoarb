{"version":3,"file":"limit.js","sourceRoot":"","sources":["../../../src/utils/limit.ts"],"names":[],"mappings":";;;AAAA;;;GAGG;AACI,MAAM,KAAK,GAAG,CAAC,WAAmB,EAAE,EAAE;IAC3C,MAAM,KAAK,GAIN,EAAE,CAAC;IACR,IAAI,MAAM,GAAG,CAAC,CAAC;IACf,MAAM,IAAI,GAAG,GAAG,EAAE;;QAChB,IAAI,MAAM,GAAG,WAAW,IAAI,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE;YAC5C,MAAM,EAAE,CAAC;YACT,MAAM,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,GAAG,MAAA,KAAK,CAAC,KAAK,EAAE,mCAAI,EAAE,CAAC;YACpD,EAAE,aAAF,EAAE,uBAAF,EAAE,GACC,IAAI,CAAC,OAAO,EACZ,KAAK,CAAC,MAAM,EACZ,IAAI,CAAC,GAAG,EAAE;gBACT,MAAM,EAAE,CAAC;gBACT,IAAI,EAAE,CAAC;YACT,CAAC,CAAC,CAAC;SACN;IACH,CAAC,CAAC;IACF,OAAO,CAAI,EAAoB,EAAE,EAAE,CACjC,IAAI,OAAO,CAAU,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACvC,KAAK,CAAC,IAAI,CAAC,EAAE,EAAE,EAAE,OAAO,EAAE,MAAM,EAAE,CAAC,CAAC;QACpC,IAAI,EAAE,CAAC;IACT,CAAC,CAAe,CAAC;AACrB,CAAC,CAAC;AAzBW,QAAA,KAAK,SAyBhB","sourcesContent":["/**\n * Minimal promise executor with concurrency limit implementation\n * @param concurrency Maximum number of promises executed concurrently\n */\nexport const limit = (concurrency: number) => {\n  const queue: Array<{\n    fn: () => Promise<unknown>;\n    resolve: (value: unknown | PromiseLike<unknown>) => void;\n    reject: (reason: unknown) => void;\n  }> = [];\n  let active = 0;\n  const next = () => {\n    if (active < concurrency && queue.length > 0) {\n      active++;\n      const { fn, resolve, reject } = queue.shift() ?? {};\n      fn?.()\n        .then(resolve)\n        .catch(reject)\n        .then(() => {\n          active--;\n          next();\n        });\n    }\n  };\n  return <T>(fn: () => Promise<T>) =>\n    new Promise<unknown>((resolve, reject) => {\n      queue.push({ fn, resolve, reject });\n      next();\n    }) as Promise<T>;\n};\n\nexport type LimitFn = ReturnType<typeof limit>;\n"]}