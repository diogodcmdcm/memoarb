{"version":3,"file":"readableFile.js","sourceRoot":"","sources":["../../../src/readable/readableFile.ts"],"names":[],"mappings":";;;AAEA,MAAa,YAAY;IAGvB,YAAY,IAAU;QACpB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;IACpB,CAAC;IAED,IAAW,QAAQ;QACjB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,IAAW,WAAW;QACpB,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAED,IAAW,MAAM;QACf,OAAO,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;IACzB,CAAC;IAEM,KAAK,CAAC,IAAI;QACf,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,KAAK;QAChB,OAAO,OAAO,CAAC,OAAO,EAAE,CAAC;IAC3B,CAAC;IAEM,KAAK,CAAC,KAAK,CAAC,KAAa,EAAE,GAAW;QAC3C,OAAO,IAAI,UAAU,CAAC,MAAM,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,WAAW,EAAE,CAAC,CAAC;IAC1E,CAAC;CACF;AA9BD,oCA8BC","sourcesContent":["import { Readable } from './readable';\n\nexport class ReadableFile implements Readable {\n  private readonly _file: File;\n\n  constructor(file: File) {\n    this._file = file;\n  }\n\n  public get fileName(): string {\n    return this._file.name;\n  }\n\n  public get contentType(): string {\n    return this._file.type;\n  }\n\n  public get length(): number {\n    return this._file.size;\n  }\n\n  public async open(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async close(): Promise<void> {\n    return Promise.resolve();\n  }\n\n  public async slice(start: number, end: number): Promise<Uint8Array> {\n    return new Uint8Array(await this._file.slice(start, end).arrayBuffer());\n  }\n}\n"]}