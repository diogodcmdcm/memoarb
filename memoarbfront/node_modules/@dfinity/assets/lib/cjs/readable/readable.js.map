{"version":3,"file":"readable.js","sourceRoot":"","sources":["../../../src/readable/readable.ts"],"names":[],"mappings":";;;AASA,MAAM,aAAa,GAAG,CACpB,GAAY,EACZ,GAAG,IAAiC,EACT,EAAE,CAC7B,GAAG,KAAK,IAAI;IACZ,OAAO,GAAG,KAAK,QAAQ;IACvB,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,SAAS,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC;AAE9D,MAAM,UAAU,GAAG,CAAC,KAAc,EAAqB,EAAE,CAC9D,aAAa,CAAC,KAAK,EAAE,UAAU,EAAE,aAAa,EAAE,QAAQ,EAAE,MAAM,EAAE,OAAO,EAAE,OAAO,CAAC;IACnF,OAAO,KAAK,CAAC,QAAQ,KAAK,QAAQ;IAClC,OAAO,KAAK,CAAC,WAAW,KAAK,QAAQ;IACrC,OAAO,KAAK,CAAC,MAAM,KAAK,QAAQ;IAChC,OAAO,KAAK,CAAC,IAAI,KAAK,UAAU;IAChC,OAAO,KAAK,CAAC,KAAK,KAAK,UAAU;IACjC,OAAO,KAAK,CAAC,KAAK,KAAK,UAAU,CAAC;AAPvB,QAAA,UAAU,cAOa","sourcesContent":["export interface Readable {\n  fileName: string;\n  contentType: string;\n  length: number;\n  open: () => Promise<void>;\n  close: () => Promise<void>;\n  slice: (start: number, end: number) => Promise<Uint8Array>;\n}\n\nconst isObjWithKeys = <K extends PropertyKey>(\n  obj: unknown,\n  ...keys: Array<K | null | undefined>\n): obj is Record<K, unknown> =>\n  obj !== null &&\n  typeof obj === 'object' &&\n  keys.every(key => key !== null && key !== undefined && key in obj);\n\nexport const isReadable = (value: unknown): value is Readable =>\n  isObjWithKeys(value, 'fileName', 'contentType', 'length', 'open', 'close', 'slice') &&\n  typeof value.fileName === 'string' &&\n  typeof value.contentType === 'string' &&\n  typeof value.length === 'number' &&\n  typeof value.open === 'function' &&\n  typeof value.close === 'function' &&\n  typeof value.slice === 'function';\n"]}