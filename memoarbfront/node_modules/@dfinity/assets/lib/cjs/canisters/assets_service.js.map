{"version":3,"file":"assets_service.js","sourceRoot":"","sources":["../../../src/canisters/assets_service.ts"],"names":[],"mappings":"","sourcesContent":["import type { Principal } from '@dfinity/principal';\n\nexport type BatchId = bigint;\nexport type BatchOperationKind =\n  | { CreateAsset: CreateAssetArguments }\n  | { UnsetAssetContent: UnsetAssetContentArguments }\n  | { DeleteAsset: DeleteAssetArguments }\n  | { SetAssetContent: SetAssetContentArguments }\n  | { Clear: ClearArguments };\nexport type ChunkId = bigint;\nexport type ClearArguments = Record<string, never>;\n\nexport interface CreateAssetArguments {\n  key: Key;\n  content_type: string;\n  headers: [] | [Array<HeaderField>];\n}\n\nexport interface DeleteAssetArguments {\n  key: Key;\n}\n\nexport type HeaderField = [string, string];\n\nexport interface HttpRequest {\n  url: string;\n  method: string;\n  body: Uint8Array;\n  headers: Array<HeaderField>;\n}\n\nexport interface HttpResponse {\n  body: Uint8Array;\n  headers: Array<HeaderField>;\n  streaming_strategy: [] | [StreamingStrategy];\n  status_code: number;\n}\n\nexport type Key = string;\nexport type Result = { Ok: null } | { Err: string };\n\nexport interface SetAssetContentArguments {\n  key: Key;\n  sha256: [] | [Uint8Array];\n  chunk_ids: Array<ChunkId>;\n  content_encoding: string;\n}\n\nexport interface StreamingCallbackHttpResponse {\n  token: [] | [StreamingCallbackToken];\n  body: Uint8Array;\n}\n\nexport interface StreamingCallbackToken {\n  key: Key;\n  sha256: [] | [Uint8Array];\n  index: bigint;\n  content_encoding: string;\n}\n\nexport type StreamingStrategy = {\n  Callback: {\n    token: StreamingCallbackToken;\n    callback: [Principal, string];\n  };\n};\nexport type Time = bigint;\n\nexport interface UnsetAssetContentArguments {\n  key: Key;\n  content_encoding: string;\n}\n\nexport default interface _SERVICE {\n  authorize: (arg_0: Principal) => Promise<undefined>;\n  clear: (arg_0: ClearArguments) => Promise<undefined>;\n  commit_batch: (arg_0: {\n    batch_id: BatchId;\n    operations: Array<BatchOperationKind>;\n  }) => Promise<undefined>;\n  create_asset: (arg_0: CreateAssetArguments) => Promise<undefined>;\n  create_batch: (arg_0: Record<string, never>) => Promise<{ batch_id: BatchId }>;\n  create_chunk: (arg_0: {\n    content: Uint8Array;\n    batch_id: BatchId;\n  }) => Promise<{ chunk_id: ChunkId }>;\n  delete_asset: (arg_0: DeleteAssetArguments) => Promise<undefined>;\n  get: (arg_0: { key: Key; accept_encodings: Array<string> }) => Promise<{\n    content: Uint8Array;\n    sha256: [] | [Uint8Array];\n    content_type: string;\n    content_encoding: string;\n    total_length: bigint;\n  }>;\n  get_chunk: (arg_0: {\n    key: Key;\n    sha256: [] | [Uint8Array];\n    index: bigint;\n    content_encoding: string;\n  }) => Promise<{ content: Uint8Array }>;\n  http_request: (arg_0: HttpRequest) => Promise<HttpResponse>;\n  http_request_streaming_callback: (\n    arg_0: StreamingCallbackToken,\n  ) => Promise<[] | [StreamingCallbackHttpResponse]>;\n  list: (arg_0: Record<string, never>) => Promise<\n    Array<{\n      key: Key;\n      encodings: Array<{\n        modified: Time;\n        sha256: [] | [Uint8Array];\n        length: bigint;\n        content_encoding: string;\n      }>;\n      content_type: string;\n    }>\n  >;\n  set_asset_content: (arg_0: SetAssetContentArguments) => Promise<undefined>;\n  store: (arg_0: {\n    key: Key;\n    content: Uint8Array;\n    sha256: [] | [Uint8Array];\n    content_type: string;\n    content_encoding: string;\n  }) => Promise<undefined>;\n  unset_asset_content: (arg_0: UnsetAssetContentArguments) => Promise<undefined>;\n}\n"]}